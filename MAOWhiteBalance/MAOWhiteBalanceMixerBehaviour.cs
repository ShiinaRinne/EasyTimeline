// This code is automatically generated by MAO Timeline Playable Wizard.
// For more information, please visit 
// https://github.com/ShiinaRinne/TimelineExtensions

using System;
using UnityEngine;
using UnityEngine.Timeline;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;


namespace MAOTimelineExtension.VolumeExtensions
{
    public class MAOWhiteBalanceMixerBehaviour : PlayableBehaviour
    {
        float m_DefaultTemperature;
        float m_DefaultTint;

        WhiteBalance m_TrackBinding;
        bool m_FirstFrameHappened;

        public override void ProcessFrame(Playable playable, FrameData info, object playerData)
        {
            ((TimelineExtensionVolumeSettings) playerData).VolumeProfile.TryGet(out m_TrackBinding);
            if (m_TrackBinding == null)
                return;
            
            if(!m_FirstFrameHappened)
            {
                m_DefaultTemperature = m_TrackBinding.temperature.value;
                m_DefaultTint = m_TrackBinding.tint.value;

                m_FirstFrameHappened = true;
            }


            int inputCount = playable.GetInputCount();
            float blendedTemperature = 0f;
            float blendedTint = 0f;

            float totalWeight = 0f;
            float greatestWeight = 0f;
            int currentInputs = 0;

            for(int i = 0; i < inputCount; i++)
            {
                float inputWeight = playable.GetInputWeight(i);
                ScriptPlayable<MAOWhiteBalanceBehaviour> inputPlayable =(ScriptPlayable<MAOWhiteBalanceBehaviour>)playable.GetInput(i);
                MAOWhiteBalanceBehaviour input = inputPlayable.GetBehaviour();
                
                blendedTemperature += input.Temperature * inputWeight;
                blendedTint += input.Tint * inputWeight;

                totalWeight += inputWeight;

                if (inputWeight > greatestWeight)
                {
                    greatestWeight = inputWeight;
                }

                if (!Mathf.Approximately (inputWeight, 0f))
                    currentInputs++;
            }
            m_TrackBinding.temperature.value = blendedTemperature + m_DefaultTemperature * (1f-totalWeight);
            m_TrackBinding.tint.value = blendedTint + m_DefaultTint * (1f-totalWeight);

        }



        public override void OnPlayableDestroy (Playable playable)
        {
            m_FirstFrameHappened = false;

            if(m_TrackBinding == null)
                return;

            m_TrackBinding.temperature.value = m_DefaultTemperature;
            m_TrackBinding.tint.value = m_DefaultTint;

        }
    }
}

